
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocEMPTYnonassocIF_DnonassocELIFnonassocELSEnonassocRELOPnonassocOPleftCOMMArightASSIGNleftORleftANDleftEQNEleftGTLTGELEleftSUMSUBleftMULDIVMODrightNOTrightUMINUSAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR ERRORFLOAT ERRORID FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE VOID WHILEprogram : declist MAIN LRB RRB blockdeclist : decdeclist : declist decdeclist : emptydec : vardec dec : funcdec type : INTEGERtype :  FLOATtype :  BOOLEANiddec : IDiddec :  ID LSB exp RSBiddec :  ID ASSIGN expidlist : iddecidlist :  idlist COMMA iddecvardec : type idlist SEMICOLONfuncdec : type ID LRB paramdecs RRB blockfuncdec :  VOID ID LRB paramdecs RRB blockparamdecs : paramdecslistparamdecs : emptyparamdecslist : paramdecparamdecslist : paramdecslist COMMA paramdecparamdec : type IDparamdec : type ID LSB RSBvarlist : vardecvarlist :  varlist vardecvarlist : emptyblock : LCB varlist stmtlist RCBstmtlist : stmtstmtlist : stmtlist stmtstmtlist :  emptylvalue : IDlvalue : ID LSB exp RSBstmt : matched_stmtstmt : unmatched_stmtmatched_stmt : IF LRB exp RRB matched_stmt elseiflist ELSE matched_stmt %prec IF_Dmatched_stmt : everythingthatcanhappenunmatched_stmt : IF LRB exp RRB matched_stmt elseiflist %prec IF_Dunmatched_stmt : IF LRB exp RRB matched_stmt elseiflist ELSE unmatched_stmt %prec IF_Deverythingthatcanhappen : RETURN exp SEMICOLONeverythingthatcanhappen : exp SEMICOLONeverythingthatcanhappen : blockeverythingthatcanhappen : WHILE LRB exp RRB stmteverythingthatcanhappen : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmteverythingthatcanhappen : PRINT LRB ID RRB SEMICOLONelseiflist : ELIF LRB exp RRB stmtelseiflist : elseiflist ELIF LRB exp RRB stmtelseiflist : emptyexp : lvalue ASSIGN expexp : exp operator exp %prec OPexp : exp relop exp %prec RELOPexp : constexp : lvalueexp : ID LRB explist RRBexp : LRB exp RRBexp : ID LRB RRBexp : SUB exp %prec UMINUSexp : NOT expoperator : ORoperator : ANDoperator : SUMoperator : SUBoperator : MULoperator : DIVoperator : MODconst : INTEGERNUMBERconst : FLOATNUMBERconst : TRUEconst : FALSErelop : GTrelop : LTrelop : NErelop : EQrelop : LErelop : GEexplist : expexplist : explist COMMA expempty : %prec EMPTY'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,13,19,79,89,108,],[-77,12,-2,-4,-5,-6,-3,-15,-16,-17,-27,]),'VOID':([0,2,3,4,5,6,13,19,79,89,108,],[-77,8,-2,-4,-5,-6,-3,-15,-16,-17,-27,]),'INTEGER':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,9,-2,-4,-5,-6,-3,-15,9,9,-77,9,9,-24,-26,-16,-17,-25,-27,]),'FLOAT':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,10,-2,-4,-5,-6,-3,-15,10,10,-77,10,10,-24,-26,-16,-17,-25,-27,]),'BOOLEAN':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,11,-2,-4,-5,-6,-3,-15,11,11,-77,11,11,-24,-26,-16,-17,-25,-27,]),'$end':([1,46,108,],[0,-1,-27,]),'ID':([7,8,9,10,11,19,20,22,23,28,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,115,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[15,17,-7,-8,-9,-15,27,33,33,48,33,33,33,-77,33,33,33,33,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,33,-77,-24,-26,27,33,-25,-28,-30,-33,-34,-36,33,-41,33,-27,-29,33,-40,33,33,121,-39,33,33,33,-77,-42,-44,33,-37,-47,33,33,33,33,-35,-38,33,33,33,-43,33,-45,33,-46,]),'LRB':([12,15,17,19,22,23,33,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,96,98,99,100,101,102,103,106,108,109,110,111,113,114,118,122,123,124,126,127,128,130,131,132,133,134,135,137,138,139,141,142,143,144,146,149,150,152,153,154,155,],[18,21,24,-15,37,37,51,37,37,37,-77,37,37,37,37,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,37,-77,-24,-26,37,-25,-28,-30,-33,-34,110,-36,37,-41,113,114,115,37,-27,-29,37,-40,37,37,-39,37,37,37,131,-77,-42,-44,37,-37,139,-47,37,37,144,37,37,-35,-38,37,37,37,-43,37,-45,37,-46,]),'SEMICOLON':([14,15,16,26,27,33,35,36,40,41,42,43,44,53,71,72,82,85,86,87,88,97,105,107,112,120,125,129,],[19,-10,-13,-14,-10,-31,-52,-51,-65,-66,-67,-68,-12,-11,-56,-57,-55,-49,-50,-48,-54,111,-53,-32,118,124,130,135,]),'COMMA':([14,15,16,26,27,30,32,33,35,36,40,41,42,43,44,48,53,71,72,80,81,82,83,85,86,87,88,104,105,107,116,],[20,-10,-13,-14,-10,50,-20,-31,-52,-51,-65,-66,-67,-68,-12,-22,-11,-56,-57,-21,106,-55,-75,-49,-50,-48,-54,-23,-53,-32,-76,]),'LSB':([15,27,33,48,],[22,22,52,78,]),'ASSIGN':([15,27,33,35,107,],[23,23,-31,69,-32,]),'RRB':([18,21,24,29,30,31,32,33,35,36,40,41,42,43,45,48,51,70,71,72,80,81,82,83,85,86,87,88,104,105,107,116,117,119,121,136,140,145,148,],[25,-77,-77,49,-18,-19,-20,-31,-52,-51,-65,-66,-67,-68,73,-22,82,88,-56,-57,-21,105,-55,-75,-49,-50,-48,-54,-23,-53,-32,-76,122,123,125,141,146,149,152,]),'IF':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,96,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,126,96,-77,-42,-44,-37,-47,96,126,-35,-38,96,96,-43,96,-45,126,-46,]),'RETURN':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,99,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,99,99,-77,-42,-44,-37,-47,99,99,-35,-38,99,99,-43,99,-45,99,-46,]),'WHILE':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,101,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,101,101,-77,-42,-44,-37,-47,101,101,-35,-38,101,101,-43,101,-45,101,-46,]),'FOR':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,102,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,102,102,-77,-42,-44,-37,-47,102,102,-35,-38,102,102,-43,102,-45,102,-46,]),'PRINT':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,103,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,103,103,-77,-42,-44,-37,-47,103,103,-35,-38,103,103,-43,103,-45,103,-46,]),'SUB':([19,22,23,33,34,35,36,37,38,39,40,41,42,43,44,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,82,83,84,85,86,87,88,90,91,92,93,94,95,97,98,99,100,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,122,123,124,127,128,129,130,131,132,134,135,136,137,139,140,141,142,143,144,145,146,148,149,150,152,153,154,155,],[-15,38,38,-31,59,-52,-51,38,38,38,-65,-66,-67,-68,59,-77,38,38,38,38,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,38,59,-56,-57,38,-24,-26,-55,59,59,59,59,59,-54,38,-25,-28,-30,-33,-34,59,-36,38,-41,-53,38,-32,-27,-29,38,-40,59,38,38,59,59,-39,59,59,38,38,38,-77,-42,59,-44,38,-37,-47,38,59,38,38,59,38,-35,-38,38,59,38,59,38,-43,38,-45,38,-46,]),'NOT':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,39,39,39,39,39,-77,39,39,39,39,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,39,39,-24,-26,39,-25,-28,-30,-33,-34,-36,39,-41,39,-27,-29,39,-40,39,39,-39,39,39,39,-77,-42,-44,39,-37,-47,39,39,39,39,-35,-38,39,39,39,-43,39,-45,39,-46,]),'LCB':([19,25,47,49,73,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,47,-77,47,47,-77,-24,-26,47,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,47,47,-77,-42,-44,-37,-47,47,47,-35,-38,47,47,-43,47,-45,47,-46,]),'INTEGERNUMBER':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,40,40,40,40,40,-77,40,40,40,40,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,40,-77,-24,-26,40,-25,-28,-30,-33,-34,-36,40,-41,40,-27,-29,40,-40,40,40,-39,40,40,40,-77,-42,-44,40,-37,-47,40,40,40,40,-35,-38,40,40,40,-43,40,-45,40,-46,]),'FLOATNUMBER':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,41,41,41,41,41,-77,41,41,41,41,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,41,-77,-24,-26,41,-25,-28,-30,-33,-34,-36,41,-41,41,-27,-29,41,-40,41,41,-39,41,41,41,-77,-42,-44,41,-37,-47,41,41,41,41,-35,-38,41,41,41,-43,41,-45,41,-46,]),'TRUE':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,42,42,42,42,42,-77,42,42,42,42,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,42,-77,-24,-26,42,-25,-28,-30,-33,-34,-36,42,-41,42,-27,-29,42,-40,42,42,-39,42,42,42,-77,-42,-44,42,-37,-47,42,42,42,42,-35,-38,42,42,42,-43,42,-45,42,-46,]),'FALSE':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,43,43,43,43,43,-77,43,43,43,43,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,43,-77,-24,-26,43,-25,-28,-30,-33,-34,-36,43,-41,43,-27,-29,43,-40,43,43,-39,43,43,43,-77,-42,-44,43,-37,-47,43,43,43,43,-35,-38,43,43,43,-43,43,-45,43,-46,]),'RCB':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,127,128,130,132,134,142,143,150,153,155,],[-15,-77,-77,-24,-26,108,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,-77,-42,-44,-37,-47,-35,-38,-43,-45,-46,]),'RSB':([33,34,35,36,40,41,42,43,71,72,78,82,84,85,86,87,88,105,107,],[-31,53,-52,-51,-65,-66,-67,-68,-56,-57,104,-55,107,-49,-50,-48,-54,-53,-32,]),'OR':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,56,-52,-51,-65,-66,-67,-68,56,56,-56,-57,-55,56,56,56,56,56,-54,56,-53,-32,56,56,56,56,56,56,56,56,56,56,]),'AND':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,57,-52,-51,-65,-66,-67,-68,57,57,-56,-57,-55,57,57,57,57,57,-54,57,-53,-32,57,57,57,57,57,57,57,57,57,57,]),'SUM':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,58,-52,-51,-65,-66,-67,-68,58,58,-56,-57,-55,58,58,58,58,58,-54,58,-53,-32,58,58,58,58,58,58,58,58,58,58,]),'MUL':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,60,-52,-51,-65,-66,-67,-68,60,60,-56,-57,-55,60,60,60,60,60,-54,60,-53,-32,60,60,60,60,60,60,60,60,60,60,]),'DIV':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,61,-52,-51,-65,-66,-67,-68,61,61,-56,-57,-55,61,61,61,61,61,-54,61,-53,-32,61,61,61,61,61,61,61,61,61,61,]),'MOD':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,62,-52,-51,-65,-66,-67,-68,62,62,-56,-57,-55,62,62,62,62,62,-54,62,-53,-32,62,62,62,62,62,62,62,62,62,62,]),'GT':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,63,-52,-51,-65,-66,-67,-68,63,63,-56,-57,-55,63,63,63,63,63,-54,63,-53,-32,63,63,63,63,63,63,63,63,63,63,]),'LT':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,64,-52,-51,-65,-66,-67,-68,64,64,-56,-57,-55,64,64,64,64,64,-54,64,-53,-32,64,64,64,64,64,64,64,64,64,64,]),'NE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,65,-52,-51,-65,-66,-67,-68,65,65,-56,-57,-55,65,65,65,65,65,-54,65,-53,-32,65,65,65,65,65,65,65,65,65,65,]),'EQ':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,66,-52,-51,-65,-66,-67,-68,66,66,-56,-57,-55,66,66,66,66,66,-54,66,-53,-32,66,66,66,66,66,66,66,66,66,66,]),'LE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,67,-52,-51,-65,-66,-67,-68,67,67,-56,-57,-55,67,67,67,67,67,-54,67,-53,-32,67,67,67,67,67,67,67,67,67,67,]),'GE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,68,-52,-51,-65,-66,-67,-68,68,68,-56,-57,-55,68,68,68,68,68,-54,68,-53,-32,68,68,68,68,68,68,68,68,68,68,]),'ELIF':([94,95,98,100,108,111,118,127,128,130,132,134,142,143,147,150,151,153,155,],[-33,-34,-36,-41,-27,-40,-39,133,-42,-44,138,-47,-35,-38,133,-43,138,-45,-46,]),'ELSE':([94,95,98,100,108,111,118,127,128,130,132,134,142,143,147,150,151,153,155,],[-33,-34,-36,-41,-27,-40,-39,-77,-42,-44,137,-47,-35,-38,-77,-43,154,-45,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[3,13,]),'empty':([0,21,24,47,74,127,147,],[4,31,31,76,93,134,134,]),'vardec':([0,2,47,74,],[5,5,75,91,]),'funcdec':([0,2,],[6,6,]),'type':([0,2,21,24,47,50,74,],[7,7,28,28,77,28,77,]),'idlist':([7,77,],[14,14,]),'iddec':([7,20,77,],[16,26,16,]),'paramdecs':([21,24,],[29,45,]),'paramdecslist':([21,24,],[30,30,]),'paramdec':([21,24,50,],[32,32,80,]),'exp':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[34,44,70,71,72,83,84,85,86,87,97,97,112,116,117,119,120,97,97,129,136,140,97,145,97,148,97,97,97,97,]),'lvalue':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'const':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'block':([25,49,73,74,90,122,123,137,141,146,149,152,154,],[46,79,89,100,100,100,100,100,100,100,100,100,100,]),'operator':([34,44,70,71,72,83,84,85,86,87,97,112,116,117,119,120,129,136,140,145,148,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'relop':([34,44,70,71,72,83,84,85,86,87,97,112,116,117,119,120,129,136,140,145,148,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'varlist':([47,],[74,]),'explist':([51,],[81,]),'stmtlist':([74,],[90,]),'stmt':([74,90,123,146,149,152,],[92,109,128,150,153,155,]),'matched_stmt':([74,90,122,123,137,141,146,149,152,154,],[94,94,127,94,142,147,94,94,94,142,]),'unmatched_stmt':([74,90,123,137,146,149,152,],[95,95,95,143,95,95,95,]),'everythingthatcanhappen':([74,90,122,123,137,141,146,149,152,154,],[98,98,98,98,98,98,98,98,98,98,]),'elseiflist':([127,147,],[132,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parse_qr.py',12),
  ('declist -> dec','declist',1,'p_decli_version1','parse_qr.py',16),
  ('declist -> declist dec','declist',2,'p_decli_version2','parse_qr.py',19),
  ('declist -> empty','declist',1,'p_decli_version3','parse_qr.py',23),
  ('dec -> vardec','dec',1,'p_decversion1','parse_qr.py',29),
  ('dec -> funcdec','dec',1,'p_decversion2','parse_qr.py',32),
  ('type -> INTEGER','type',1,'p_type1','parse_qr.py',39),
  ('type -> FLOAT','type',1,'p_type2','parse_qr.py',43),
  ('type -> BOOLEAN','type',1,'p_type3','parse_qr.py',48),
  ('iddec -> ID','iddec',1,'p_iddec_version1','parse_qr.py',55),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec1_version2','parse_qr.py',59),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec1_version3','parse_qr.py',62),
  ('idlist -> iddec','idlist',1,'p_idlist_version1','parse_qr.py',69),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist_version2','parse_qr.py',72),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','parse_qr.py',79),
  ('funcdec -> type ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_vesrion1','parse_qr.py',86),
  ('funcdec -> VOID ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_version2','parse_qr.py',91),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs_vesrion1','parse_qr.py',99),
  ('paramdecs -> empty','paramdecs',1,'p_paramdecs_version2','parse_qr.py',102),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist_vesrion1','parse_qr.py',109),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist_vesrion2','parse_qr.py',113),
  ('paramdec -> type ID','paramdec',2,'p_paramdec_vesrion1','parse_qr.py',120),
  ('paramdec -> type ID LSB RSB','paramdec',4,'p_paramdec_version2','parse_qr.py',123),
  ('varlist -> vardec','varlist',1,'p_varlist_version1','parse_qr.py',130),
  ('varlist -> varlist vardec','varlist',2,'p_varlist_version2','parse_qr.py',134),
  ('varlist -> empty','varlist',1,'p_varlist_version3','parse_qr.py',139),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','parse_qr.py',146),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist_version1','parse_qr.py',153),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist_version2','parse_qr.py',157),
  ('stmtlist -> empty','stmtlist',1,'p_stmtlist_version3','parse_qr.py',162),
  ('lvalue -> ID','lvalue',1,'p_lvalue_version1','parse_qr.py',170),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_version2','parse_qr.py',174),
  ('stmt -> matched_stmt','stmt',1,'p_stmt_version1','parse_qr.py',181),
  ('stmt -> unmatched_stmt','stmt',1,'p_stmt_version2','parse_qr.py',185),
  ('matched_stmt -> IF LRB exp RRB matched_stmt elseiflist ELSE matched_stmt','matched_stmt',8,'p_stmt_matched_version1','parse_qr.py',192),
  ('matched_stmt -> everythingthatcanhappen','matched_stmt',1,'p_stmt_matched_version2','parse_qr.py',197),
  ('unmatched_stmt -> IF LRB exp RRB matched_stmt elseiflist','unmatched_stmt',6,'p_stmt_unmatched_version1','parse_qr.py',204),
  ('unmatched_stmt -> IF LRB exp RRB matched_stmt elseiflist ELSE unmatched_stmt','unmatched_stmt',8,'p_stmt_unmatched_version2','parse_qr.py',208),
  ('everythingthatcanhappen -> RETURN exp SEMICOLON','everythingthatcanhappen',3,'p_stmt_others_version1','parse_qr.py',217),
  ('everythingthatcanhappen -> exp SEMICOLON','everythingthatcanhappen',2,'p_stmt_others_version2','parse_qr.py',221),
  ('everythingthatcanhappen -> block','everythingthatcanhappen',1,'p_stmt_others_version3','parse_qr.py',226),
  ('everythingthatcanhappen -> WHILE LRB exp RRB stmt','everythingthatcanhappen',5,'p_stmt_others_version4','parse_qr.py',232),
  ('everythingthatcanhappen -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','everythingthatcanhappen',9,'p_stmt_others_version5','parse_qr.py',237),
  ('everythingthatcanhappen -> PRINT LRB ID RRB SEMICOLON','everythingthatcanhappen',5,'p_stmt_others_version6','parse_qr.py',242),
  ('elseiflist -> ELIF LRB exp RRB stmt','elseiflist',5,'p_elseiflist_version1','parse_qr.py',249),
  ('elseiflist -> elseiflist ELIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist_version2','parse_qr.py',252),
  ('elseiflist -> empty','elseiflist',1,'p_elseiflist_version3','parse_qr.py',256),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_version1','parse_qr.py',264),
  ('exp -> exp operator exp','exp',3,'p_exp_version2','parse_qr.py',269),
  ('exp -> exp relop exp','exp',3,'p_exp_version3','parse_qr.py',274),
  ('exp -> const','exp',1,'p_exp_version5','parse_qr.py',279),
  ('exp -> lvalue','exp',1,'p_exp_version6','parse_qr.py',284),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp_version7','parse_qr.py',289),
  ('exp -> LRB exp RRB','exp',3,'p_exp_version8','parse_qr.py',293),
  ('exp -> ID LRB RRB','exp',3,'p_exp_version9','parse_qr.py',298),
  ('exp -> SUB exp','exp',2,'p_exp_version10','parse_qr.py',301),
  ('exp -> NOT exp','exp',2,'p_exp_version11','parse_qr.py',305),
  ('operator -> OR','operator',1,'p_operator_version1','parse_qr.py',315),
  ('operator -> AND','operator',1,'p_operator_version2','parse_qr.py',318),
  ('operator -> SUM','operator',1,'p_operator_version3','parse_qr.py',321),
  ('operator -> SUB','operator',1,'p_operator_version4','parse_qr.py',325),
  ('operator -> MUL','operator',1,'p_operator_version6','parse_qr.py',332),
  ('operator -> DIV','operator',1,'p_operator_version7','parse_qr.py',335),
  ('operator -> MOD','operator',1,'p_operator_version8','parse_qr.py',340),
  ('const -> INTEGERNUMBER','const',1,'p_const_version1','parse_qr.py',345),
  ('const -> FLOATNUMBER','const',1,'p_const_version2','parse_qr.py',349),
  ('const -> TRUE','const',1,'p_const_version3','parse_qr.py',354),
  ('const -> FALSE','const',1,'p_const_version4','parse_qr.py',358),
  ('relop -> GT','relop',1,'p_relop_version1','parse_qr.py',362),
  ('relop -> LT','relop',1,'p_relop_version2','parse_qr.py',367),
  ('relop -> NE','relop',1,'p_relop_version3','parse_qr.py',371),
  ('relop -> EQ','relop',1,'p_relop_version4','parse_qr.py',374),
  ('relop -> LE','relop',1,'p_relop_version5','parse_qr.py',378),
  ('relop -> GE','relop',1,'p_relop_version6','parse_qr.py',381),
  ('explist -> exp','explist',1,'p_explist_version1','parse_qr.py',385),
  ('explist -> explist COMMA exp','explist',3,'p_explist_version2','parse_qr.py',389),
  ('empty -> <empty>','empty',0,'p_empty','parse_qr.py',393),
]
